import copy
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import cm
import numpy as np

#步长，初始值，及终止值
step = 0.1
start = 0
end = 100

# r = [0.15,0.09]
# p = [[1,0.5],[-0.3,1]]
# k = [100,80]
A0 = 50
s = 0.005
rain = []

r0 = [0.5159957735735413, 0.8851941724411082, 0.46611644188771195, 0.5660418492478646, 0.37562615161784996, 0.5432444727993231, 0.6151961006833532, 0.5499324562523993, 0.7223916034290054, 0.6268513971354134, 0.44512034281607815, 0.6140044550869715, 0.4461260206216382, 0.39924541176928185, 0.1628711161459191, 0.9264146640974423, 0.188084994226214, 0.33182819265299157, 0.800101042920951, 0.37233687424903616, 0.44355772313332387, 0.6516814166651487, 0.3817162282661817, 0.7417695152500131, 0.4601544249165723, 0.9453955438347337, 0.34937618083687927, 0.6941629829490581, 0.47456425261519863, 0.8767421794794739, 0.7339062581270024, 0.5759478128214431, 0.44901087067487744, 0.5557112123906276, 0.11933547746948432, 0.22093323654480213, 0.35522378042040326, 0.49670446536866575, 0.7196969472889061, 0.7781132710140094, 0.12801890464855878, 0.30791947328745173, 0.6420427166385695, 0.9398857066650228, 0.7875767950678568, 0.20837944611470027, 0.2244734794550067, 0.2096208458269591, 0.19065752564745986, 0.10989453733825097, 0.6274201294931435, 0.6892923354093108, 0.9725314939073695, 0.7057454778316161, 0.24664228460747825, 0.4179974572021177, 0.7850706820905582, 0.5796427506167422, 0.3908142908271154, 0.38634077253629073, 0.9922567470081901, 0.11363289151779538, 0.6735421678693174, 0.8914211141859834, 0.9548858671104223, 0.3481942540621714, 0.41536011779961757, 0.23002483331955537, 0.33444845697533504, 0.8273911989819964, 0.9041360889311085, 0.7072601383852692, 0.5853382140532495, 0.79999924474603, 0.8403403535797116, 0.1902665024000489, 0.4973978520043669, 0.6127956043858285, 0.11526461324574647, 0.4579226307021843, 0.5284088863459317, 0.890872686684083, 0.8652745252373726, 0.5921989098915842, 0.9361631901764443, 0.5814881378616052, 0.9045260545793747, 0.9394295884124833, 0.4668233377492319, 0.5617787747127879, 0.8274115231205441, 0.6688128261793258, 0.8128572244874667, 0.1138675654005469, 0.9366840091472528, 0.31531484428461193, 0.5969706526448881, 0.19670268396523, 0.9936124398991601, 0.1466345016903887, 0.5048133067475028, 0.9402971858768595, 0.5731856189849205, 0.7818022792136441, 0.8935981166089727, 0.9770043708576118, 0.15627611380719375, 0.2021997955127999, 0.675903141714541, 0.838420145143137, 0.7324560634785524, 0.18873100089879719, 0.4779497137468973, 0.413020084869557, 0.5462008189641666, 0.24135609930563992, 0.45036108826313037, 0.9022301198304932, 0.5974633603841694, 0.565809198191852, 0.8364696266524011, 0.9224251549176945, 0.5499604398588773, 0.31767911885846256, 0.6404710447748876, 0.528712593312866, 0.6574053860308718, 0.9522288967599665, 0.847102854234592, 0.7610719124176928, 0.4001669245384505, 0.7093797000851553, 0.15172684018268937, 0.1767406727169225, 0.1625918336549111, 0.5401060076665394, 0.6304616549850061, 0.8782144958209395, 0.9995870821156994, 0.15718710858493928, 0.49375106320016515, 0.2401950267798811, 0.2578195705576347, 0.2480935921267703, 0.8907603047728891, 0.8594606585693297, 0.5325954544347282, 0.8516456220624297, 0.5434599740049999, 0.47611843278759824, 0.7891613432294861, 0.4625332227834862, 0.6371454116309733, 0.6745725008393825, 0.7871654797499489, 0.48247745866859015, 0.14076576439271202, 0.46796785673779284, 0.42069105713715904, 0.9488133597139617, 0.16864774549883316, 0.2428417435838865, 0.4370571889331524, 0.33617699528833495, 0.7804703966391766, 0.12562766366375538, 0.7704023277435096, 0.7390501501611738, 0.10463089128924458, 0.14260412505978698, 0.8009127023941401, 0.14050118550424423, 0.350165200892538, 0.4964723793032009, 0.7677627257298487, 0.751115654200381, 0.8369434765870252, 0.30191464901738085, 0.4069639734912125, 0.899025618221229, 0.4902204995522581, 0.2455427389226471, 0.6202479330802966, 0.9010443406457076, 0.5334610063897244, 0.17329224528494092, 0.37465372670918284, 0.637815327900708, 0.7035201473757098, 0.2309223248144983, 0.6711693760141685, 0.43362699165550156, 0.32513640826146806, 0.7005955733761408, 0.6776644577835483, 0.9347268741230385, 0.965219384198245, 0.5249011557142055, 0.9942989791502354, 0.5425670191504438]
p0 = []
k0 = [159.29873230665345, 144.27689552571883, 98.29752108089419, 12.46803905157617, 41.25184466796068, 32.12032776261965, 133.91454610337837, 109.4264524921722, 82.58426957598097, 58.805071957493375, 127.53755105681788, 65.82483116314323, 51.97218122395098, 104.09804706417407, 55.23455239107472, 118.10526627971541, -2.8148474314912306, 189.32519515240273, 153.8541596706807, 173.11760950869314, 73.66575714052743, -21.625328666201924, 152.8746738969906, 6.819029491596268, 200.1030065423494, 132.37668604869532, 61.039140749969256, 129.700732674941, 116.25432732479146, 92.12562565320826, 89.20101990512674, 135.33157942453093, 65.96558594120913, 102.35571597259374, 84.42071611032725, 125.21787097089774, 139.8862461106641, 244.9885664133675, 45.416740033702695, 92.65452066934166, 89.02931018966906, 107.71076869854804, 90.18834052292883, 81.90974431085807, 213.37270033322, 136.26487252587552, 115.37065935106983, 82.8560723252613, 123.49325543002163, 75.91684075726661, 67.2684570745648, 73.03290966152791, 45.89561544160345, 99.38617625965215, 2.636014413231436, 185.50415649099932, 14.7851393268122, 111.09573788896914, 89.48095727178806, 83.48344935503125, 95.39381814087648, 108.13326639816847, 201.963967738203, 59.652501446288525, -114.58455818419023, 116.64708132176348, 92.22674696535776, 203.65289014774856, 128.1455994147277, 28.43416992409817, 148.10825560063347, 183.52340562486256, 69.0830929193935, 108.49307075623605, 99.15286842919771, 89.38477927489294, 48.79683683263357, 150.7580697777076, 92.94047463472697, 35.56803258978948, 110.02062597759392, 21.88611823819444, 180.29088669323073, 81.07009481549899, 102.59195795487732, 141.57713425879862, -57.21143816355965, 242.08934147125382, -29.25758198768341, 99.8723858333708, 186.5320124536084, 112.11189136524044, 80.9217416010218, 118.9201432560928, 46.914404234905724, 72.99554158352848, 52.553461180360515, 68.24995807795594, 123.98104614252436, 118.74054106338042, 122.02433531451209, 75.78737231418775, 94.61368240572043, 101.15716230604238, 90.56961363114176, 50.964790820726456, 149.82916333864165, 90.31289723509626, 78.8807200422802, 84.34812615583361, 89.66615626471919, 117.09076227565521, -25.903569046687068, 149.32042682635546, 144.423747264927, 69.66845449245326, 110.13063369824732, 107.81073151298429, 181.66213240513383, 31.721381331445556, 147.2805947822937, 115.95278401213426, 213.81401635863355, -16.42968971368606, 145.31545718893432, 163.0470435790997, 163.61873353453478, 49.92300743080333, 134.6996568331915, 31.51961250790349, 15.598555565903737, 36.56651038420004, 182.4990427380657, 111.54050888377127, 39.1819367977951, 89.77086400269388, 163.84824575497717, 142.58547488435593, 158.65406295918348, 69.09135376324677, 168.58605940086096, 76.982336534414, 67.48290434447034, 21.0339550096233, 130.87689771408805, 266.17445884865083, 149.09038164041556, 48.74172509885219, 91.579363802204, 121.33107798115309, 92.88574332436669, 151.1730222460801, 144.75561755313777, 72.33607945875241, 67.27829247429653, 21.13819877770719, 160.82940091614475, 106.68426050048765, 36.900663150888, 97.02727499840313, 125.4288390775552, 14.544327598901347, 118.57789442373407, 79.41087251322988, 179.98002467862585, -9.642214387987153, 20.953448539106844, 96.63543644072662, 45.82040963144239, 93.20190825249071, 134.69069887166467, 124.06678158637115, 71.12093229027278, 157.6945119771308, 110.14516366888641, 186.45768995552498, 41.476921571441416, 143.6732603784729, 144.42327431731638, -79.5210349537791, 149.50188259088645, 291.0211237277688, 63.112281727074894, 187.40150876582138, 67.47351591693152, 145.60827351709185, 171.2745097701598, 204.0949468039121, 77.14984010536674, 68.01313295577347, 119.6304584129996, -23.527516915442646, 0.6259459437185058, 8.345285694443177, 128.36487748306638, 27.723617243943394, 193.65525968329368, 124.25741639450968, 30.153608947701386, 131.06944203967987]
b0 = [0.003885964790816532, 7.685749286701905e-05, 0.0008726503189530261, 7.444948513608163e-05, 0.0030868612584517797, 0.0029490453750985446, 0.0031507774942694756, 0.0016390690698749122, 0.0028997467484094546, 0.00018812202844138592, 0.0005390672456454482, 0.004707345612002905, 0.0003871761118760864, 0.0035029157770620047, 0.00011594476860246728, 0.0030138170129211106, 0.0014497778195474125, 0.002773834159206611, 0.004377794456826343, 0.002013459551360109, 0.0019066531236631174, 0.0028055071976062535, 5.794188294366176e-05, 0.001998316339992686, 0.0012257172459929427, 0.0019012783703279358, 0.0024691686402272517, 0.001931590184311468, 0.003664761375466886, 0.003540388850635569, 0.0022847376697736664, 0.0022131635700937988, 0.002282721440091971, 0.004467053996199049, 0.0011410477140973917, 0.004668668573425209, 0.004750159848834854, 0.0007798342657808499, 0.004286022788293329, 0.0033964302387505096, 0.0038584156887577587, 0.0039465157999918135, 0.0006852926330715881, 0.0033403553038324338, 0.00023934670146431248, 0.0021304385186624187, 0.0005541891539310695, 0.0019591588032919194, 0.0036557865688497536, 0.003702787410350211, 0.0020314187725532706, 0.004994138220508839, 0.0032250540584111203, 0.00120517223203799, 0.004338274921182302, 0.00017016523992600951, 0.001310952861318606, 0.0009271536639134381, 0.0031608693396953415, 0.0016939997882359126, 0.0005691117483352876, 0.003862883912266597, 0.0020403570719148777, 0.0006016532525110074, 0.003942548416326908, 0.0004388533226526059, 0.001576139229890411, 0.0016928562763416566, 0.0034943914401947343, 0.0018658026224838526, 0.00017676422593414232, 0.003144828844329587, 0.00460560468942675, 0.0005304619853514319, 0.0016954834854585193, 0.0010787853665495317, 0.0036440728472342423, 0.004977799706577237, 0.00026037871747250363, 0.000587628712907588, 0.004604349612132337, 0.001458739364212775, 0.002446908395550595, 0.004787542509102879, 4.404268012959844e-05, 0.0035573939014187693, 0.0027993053083282364, 0.0036483201934512034, 0.004310489964731921, 0.0022923197530003705, 0.003010671930389002, 0.0027142389329599587, 0.0034324413047803182, 0.0008107231354656386, 0.003376986223656913, 0.0044158907290641185, 0.004191078555836594, 0.00032400562363518184, 0.002215977691754598, 0.0046458476231676284, 0.0033057589822068295, 0.0023088949010153298, 0.0025071607118472734, 0.0012784390473889469, 0.0018483808670648255, 0.0015995021395998439, 0.0007757909632096838, 0.002886841530728974, 0.0027212041439005495, 0.004811236408625845, 0.00261537846365158, 0.004243510965777318, 0.003911479363659558, 0.004979651931680179, 0.004659668396080128, 8.326000556997281e-05, 0.0014506809148766397, 0.00045947488312270303, 0.001947528467226848, 0.0020338505059649824, 0.0021157123951701306, 1.9199698958973223e-05, 0.004390987408119782, 0.0010113539060624033, 0.0006996589068428971, 0.0015964756767613926, 0.004998013593270425, 0.0035516574393181155, 0.003560521422073129, 0.004370788197871072, 0.000774658417628874, 0.0026837864765045516, 0.003715133321206221, 0.004259364271083331, 0.0029062592526161186, 0.0008329844084323141, 0.0021750200866645785, 0.0014752078417241915, 0.0030786595179761577, 0.0004629449209675141, 0.0011083267089506983, 0.0029535314131588133, 0.002406243674666224, 0.004680617365896149, 0.0021573691858116383, 0.004227005318181581, 0.004072036325664267, 0.003391336047539855, 0.0015948452303261012, 0.0012696522620914141, 0.0019135636097896225, 0.0022939666028116376, 0.004477675946506768, 0.003877255805534115, 5.9853129479653376e-05, 0.004975695344180657, 0.003838047866508174, 0.0016402394541097031, 0.003322057278897481, 0.0021020971113640745, 0.003054184877639667, 0.0048257574143708, 0.004708117055940792, 0.0037640598340601067, 0.003957750489990858, 0.003976450185325312, 0.0019663459403574998, 0.00019786856205686378, 0.00434044493462588, 0.0035562849514760952, 0.0005420941676488056, 0.002608590227149026, 0.002796349710550586, 0.0009157980701180158, 0.004068627736619456, 0.0039239039530913605, 0.004019394924554231, 0.0022682296702145766, 0.004405079330997751, 0.0016582954904679548, 0.0009108649927312946, 0.001577931026417766, 0.0038281391492906588, 0.002635307822418035, 0.001763196903227043, 0.00044751966892485063, 0.0008220562805798038, 0.004775343078186651, 0.004750995995371439, 0.00038176507118527935, 0.00442791517219697, 0.003133883850783735, 0.0025444560325339825, 0.0021155882917651588, 8.38633888843987e-05, 0.001089359727639213, 0.0011082057609214718, 0.001984605594283412, 0.0006668700559642615, 0.004516671512556395]

r = []
p = []
k = []
b = []

def read():
    global rain
    global p0
    df = pd.read_excel(r'D:\Desktop\one.xls')
    data = df.values.tolist()
    data = list(map(list, zip(*data)))
    rain = data[0] + data[1] + data[2] + data[3]

    df = pd.read_excel(r'D:\Desktop\p0.xlsx')
    p0 = df.values.tolist()

    # print(rain)

def creatdata(n):
    global r
    global p
    global k
    global b
    r = r0[:n]
    p = [p0[i][:n] for i in range(n)]
    k = k0 [:n]
    b = b0[:n]

def K(list, i):
    return k[i] * list[-1] / 200

def f1(list, i):
    return r[i] * list[i + 1] * (1 - sum([p[i][j] * list[j + 1] / K(list,j) for j in range(len(list) - 2)]))

def f2(list,i):
    return -1 * s * list[-1] - sum([list[j + 1] * b[j] for j in range(len(list) - 2)])

def RK4(t,variables,functions):
    n = len(variables)
    list = [[0 for i in range(n)] for j in range(4)]
    year = -1
    for i in range(len(t) - 1):
        parameter = [j[i] for j in variables]
        parameter.insert(0,t[i])

        for j in range(n):
            list[0][j] = functions[j](parameter,j)

        parameter = [variables[j][i] + step * list[0][j] / 2 for j in range(len(variables))]
        parameter.insert(0,t[i] + step / 2)
        for j in range(n):
            list[1][j] = functions[j](parameter,j)

        parameter = [variables[j][i] + step * list[1][j] / 2 for j in range(len(variables))]
        parameter.insert(0,t[i] + step / 2)
        for j in range(n):
            list[2][j] = functions[j](parameter,j)

        parameter = [variables[j][i] + step * list[2][j] for j in range(len(variables))]
        parameter.insert(0,t[i] + step)
        for j in range(n):
            list[3][j] = functions[j](parameter,j)

        parameter = [variables[j][i] + step / 6 * (list[0][j] + 2 * list[1][j] + 2 * list[2][j] + list[3][j]) for j in range(len(variables))]
        for j in range(n):
            variables[j][i + 1] = parameter[j]
        if int(t[i])//365 > year:
            copy_rain = copy.deepcopy(rain)
            year += 1
        variables[-1][i + 1] += copy_rain[int(t[i]) % len(rain)]
        copy_rain[int(t[i]) % len(rain)] = 0
    return variables

#主函数
if __name__ == "__main__":

    read()
    x = []
    temp = start
    while temp <= end:
        x.append(temp)
        temp += step
    # u1 = [0 for i in range(len(x))]
    # u2 = [0 for i in range(len(x))]
    for n in range(len(r0)):
        creatdata(n)
        variables = [[0 for i in range(len(x))] for j in range(len(r) + 1)]
        for i in range(len(r)):
            variables[i][0] = k[i] / 10
        variables[len(r)][0] = A0

        functions = [f1 for i in range(len(r))]
        functions.append(f2)
        variables = RK4(x, variables, functions)

        # print(variables)
        survive = 0
        for i in variables:
            if i[-1] < 0.01:
                survive += 1


        value = sum([sum(i) for i in variables]) / len(x)
        print(value,survive)

    # # colors = ["#63b2ee", "#76da91" , "#f8cb7f" ,"#f89588", "#7cd6cf","#9192ab" ,"#7898e1","#efa666" ,"#eddd86","#9987ce","#63b2ee","#76da91"]
    # colors = cm.gnuplot(np.arange(len(r))/len(r))
    # #作图
    # plt.rcParams['font.sans-serif'] = ['SimHei']
    # plt.rcParams['axes.unicode_minus'] = False
    # for i in range(len(r)):
    #     plt.plot(x, variables[i], color=colors[i] ,linewidth=1.0, linestyle="-", label = '阅读人数')  # 将散点连在一起
    # # plt.plot(x, u2, color="blue", linewidth=1.0, linestyle="-")  # 将散点连在一起
    #
    # # 添加图例
    # font = {'family': 'simhei',  # 这里必须要有第5行的操作前提
    #         'weight': 'normal',
    #         'size': 5,
    #         }
    # plt.legend(loc=0,prop=font,labelspacing=1,frameon=True)
    # plt.xlabel('时间')
    # plt.ylabel('种群密度')
    # plt.savefig("test.svg", dpi=300, format="svg")
    # plt.show()
    #
    # # 保存图为svg格式，即矢量图格式
    #
    #
    # # 作图
    # plt.rcParams['font.sans-serif'] = ['SimHei']
    # plt.rcParams['axes.unicode_minus'] = False
    # plt.plot(x, variables[-1], color="red", linewidth=1.0, linestyle="-")  # 将散点连在一起
    # # plt.plot(x, u2, color="blue", linewidth=1.0, linestyle="-")  # 将散点连在一起
    # plt.xlabel('时间')
    # plt.ylabel('种群密度')
    # plt.show()

